In a pinch, you can send email using the SendGridService in one of three ways:

1. Using any controller's built-in sendMail method, and passing your email details to it.

 > Note: This is the grails-mail way of doing things, and should always be your preferred method to allow for quick and easy interchange of any grails-supported mail plugin.

{code}
sendMail {
     from 'antony@example.com'
     to 'aiten@example.net'
     to 'wirah@example.org'
     bcc 'yourbcc@example.com'
     subject 'This is the subject line'
     body 'This is our message body'
}
{code}

2. Using the sendMail closure from any class which has a reference to the SendGridService.

As above, but referencing the sendMail method of the SendGridService directly:

{code}
sendGridService.sendMail {
    ...
}
{code}

3. Using the email builder

This is useful when you might want a more programmatic approach to sending email.

{code}
SendGridEmail email = new SendGridEmailBuilder()
                        .from('antony@example.com')
                        .to('aiten@example.net')
                        .subject('This is the subject line')
                        .withText('This is our message body')
                        .build()
{code}

When you've built your email, pass it to the SendGridService's send method:

{code}
sendGridService.send(email)
{code}

The email builder is written as a natural-language type DSL, so you might find that there is more than one way to build your email, but under the covers, they are exactly the same.

4. Optional email parameters and advanced sending instructions

{table}
*Option* | *Builder Syntax* | *sendMail { } Syntax* | *Parameter types* | *Can be called more than once* | *Required*
Recipient | {code}.to('email@example.com'){code} | {code}to 'email@example.com'{code} | String | Yes | Yes
Recipient display name with email address | {code}.to('Antony Jones', 'email@example.com'){code} or {code}.addRecipient('Antony Jones', 'email@example.com'){code} | @not implemented@ | String, String | Yes | No
Sender | {code}.from('email@example.com'){code} | {code}from 'email@example.com'{code} | String | No | Yes
Sender display name with email address | {code}.from('Antony Jones', 'email@example.com'){code} | @not implemented@ | String, String | No | No
Reply-to address | {code}.replyTo('email@example.com'){code} | {code}replyTo 'email@example.com'{code} | String | No | No
Sent date | {code}.sentDate(new Date()){code} | {code}sentDate new Date(){code} | Date | No | No
Subject | {code}.subject('Your subject line'){code} | {code}subject 'Your subject line'{code} | String | No | Yes
Blind Carbon-copy | {code}.addBcc('email@example.com'){code} | {code} bcc 'email@example.com'{code} | String | Yes | Yes
Body text | {code}.text('Your message text'){code} | {code}body 'Your message text'{code} | String | No | Yes (one of text or html)
Body html | {code}.html('<h2>Your message html</h2>'){code} | {code}html '<h2>Your message html</h2>'{code} | String | No | Yes (one of text or html)
Custom [handling instruction|http://docs.sendgrid.com/documentation/api/smtp-api/] | {code}.addCustomHandlingInstruction('headerName', 'headerValue'){code} | {code}addCustomHandlingInstruction 'headerName', 'headerValue'{code} | String, String | Yes | No
Header | {code}.addHeader('headerName', 'headerValue'){code} | {code}addHeader 'headerName', 'headerValue'{code} | String, String | Yes | No
Attachments | {code}.addAttachment(new File('/tmp/your.file')){code} | {code}attach new File('/tmp/your.file'){code} | File | Yes | No
{table}

For further details, see the sendgrid api [http://docs.sendgrid.com/documentation/api/web-api/mail/]

